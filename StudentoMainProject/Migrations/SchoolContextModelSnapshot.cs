// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolGradebook.Data;

namespace StudentoMainProject.Migrations
{
    [DbContext(typeof(SchoolContext))]
    partial class SchoolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SchoolGradebook.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminLevel")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("UserAuthId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Approbation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SubjectTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectTypeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Approbations");
                });

            modelBuilder.Entity("SchoolGradebook.Models.AttendanceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonRecordId")
                        .HasColumnType("int");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonRecordId");

                    b.HasIndex("StudentId");

                    b.ToTable("AttendanceRecords");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseRoomId")
                        .HasColumnType("int");

                    b.Property<short>("Grade")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseRoomId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int?>("GradeGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeGroupId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectInstanceId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolGradebook.Models.GradeAverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("GradeAverages");
                });

            modelBuilder.Entity("SchoolGradebook.Models.GradeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AddedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GradeGroups");
                });

            modelBuilder.Entity("SchoolGradebook.Models.HumanActivationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeType")
                        .HasColumnType("int");

                    b.Property<string>("HumanCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HumanActivationCodes");
                });

            modelBuilder.Entity("SchoolGradebook.Models.LessonRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeFrameId")
                        .HasColumnType("int");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectInstanceId");

                    b.HasIndex("TimeFrameId");

                    b.ToTable("LessonRecords");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserAuthId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("SchoolGradebook.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationIdentifNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CityAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PersonalIdentifNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolGradebook.Models.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("SchoolGradebook.Models.StudentGroupEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGroupEnrollments");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectTypeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectInstances");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectInstanceEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("SubjectInstanceId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AddedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectMaterialGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<bool>("ToDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SubjectMaterialGroupId");

                    b.HasIndex("SubjectTypeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectMaterials");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectMaterialGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AddedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubjectMaterialGroups");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SpecializationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SubjectTypes");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CityAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalIdentifNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolGradebook.Models.TimeFrame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubjectInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubjectInstanceId");

                    b.ToTable("TimeFrames");
                });

            modelBuilder.Entity("SchoolGradebook.Models.TimetableChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Canceled")
                        .HasColumnType("bit");

                    b.Property<int?>("CurrentRoomId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentSubjectInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentTeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeFrameId")
                        .HasColumnType("int");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRoomId");

                    b.HasIndex("CurrentSubjectInstanceId");

                    b.HasIndex("CurrentTeacherId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("TimeFrameId");

                    b.ToTable("TimetableChanges");
                });

            modelBuilder.Entity("SchoolGradebook.Models.TimetableRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Recurrence")
                        .HasColumnType("int");

                    b.Property<int>("RecurrenceStart")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeFrameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SubjectInstanceId");

                    b.HasIndex("TimeFrameId");

                    b.ToTable("TimetableRecords");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Admin", b =>
                {
                    b.HasOne("SchoolGradebook.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Approbation", b =>
                {
                    b.HasOne("SchoolGradebook.Models.SubjectType", "SubjectType")
                        .WithMany()
                        .HasForeignKey("SubjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolGradebook.Models.Teacher", "Teacher")
                        .WithMany("Approbations")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectType");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolGradebook.Models.AttendanceRecord", b =>
                {
                    b.HasOne("SchoolGradebook.Models.LessonRecord", "LessonRecord")
                        .WithMany("Attendance")
                        .HasForeignKey("LessonRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolGradebook.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LessonRecord");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Class", b =>
                {
                    b.HasOne("SchoolGradebook.Models.Room", "BaseRoom")
                        .WithMany()
                        .HasForeignKey("BaseRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolGradebook.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolGradebook.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseRoom");

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Grade", b =>
                {
                    b.HasOne("SchoolGradebook.Models.GradeGroup", "GradeGroup")
                        .WithMany("Grades")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SchoolGradebook.Models.SubjectInstance", "SubjectInstance")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectInstanceId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("GradeGroup");

                    b.Navigation("Student");

                    b.Navigation("SubjectInstance");
                });

            modelBuilder.Entity("SchoolGradebook.Models.LessonRecord", b =>
                {
                    b.HasOne("SchoolGradebook.Models.SubjectInstance", "SubjectInstance")
                        .WithMany()
                        .HasForeignKey("SubjectInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.TimeFrame", "TimeFrame")
                        .WithOne("LessonRecord")
                        .HasForeignKey("SchoolGradebook.Models.LessonRecord", "TimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SubjectInstance");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Room", b =>
                {
                    b.HasOne("SchoolGradebook.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Student", b =>
                {
                    b.HasOne("SchoolGradebook.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.Parent", null)
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolGradebook.Models.StudentGroup", b =>
                {
                    b.HasOne("SchoolGradebook.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolGradebook.Models.StudentGroupEnrollment", b =>
                {
                    b.HasOne("SchoolGradebook.Models.Class", null)
                        .WithMany("StudentGroupEnrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.StudentGroup", "StudentGroup")
                        .WithMany("StudentGroupEnrollments")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolGradebook.Models.Student", "Student")
                        .WithMany("StudentGroupEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectInstance", b =>
                {
                    b.HasOne("SchoolGradebook.Models.SubjectType", "SubjectType")
                        .WithMany("SubjectInstances")
                        .HasForeignKey("SubjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolGradebook.Models.Teacher", "Teacher")
                        .WithMany("SubjectInstances")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("SubjectType");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectInstanceEnrollment", b =>
                {
                    b.HasOne("SchoolGradebook.Models.StudentGroup", "StudentGroup")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolGradebook.Models.SubjectInstance", "SubjectInstance")
                        .WithMany("Enrollments")
                        .HasForeignKey("SubjectInstanceId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("StudentGroup");

                    b.Navigation("SubjectInstance");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectMaterial", b =>
                {
                    b.HasOne("SchoolGradebook.Models.SubjectMaterialGroup", "SubjectMaterialGroup")
                        .WithMany("SubjectMaterials")
                        .HasForeignKey("SubjectMaterialGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.SubjectType", "SubjectType")
                        .WithMany("SubjectMaterials")
                        .HasForeignKey("SubjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.Teacher", "Teacher")
                        .WithMany("SubjectMaterials")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SubjectMaterialGroup");

                    b.Navigation("SubjectType");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectType", b =>
                {
                    b.HasOne("SchoolGradebook.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Teacher", b =>
                {
                    b.HasOne("SchoolGradebook.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolGradebook.Models.TimeFrame", b =>
                {
                    b.HasOne("SchoolGradebook.Models.Room", null)
                        .WithMany("TimeFrames")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolGradebook.Models.SubjectInstance", null)
                        .WithMany("TimeFrames")
                        .HasForeignKey("SubjectInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolGradebook.Models.TimetableChange", b =>
                {
                    b.HasOne("SchoolGradebook.Models.Room", "CurrentRoom")
                        .WithMany()
                        .HasForeignKey("CurrentRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.SubjectInstance", "CurrentSubjectInstance")
                        .WithMany()
                        .HasForeignKey("CurrentSubjectInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.Teacher", "CurrentTeacher")
                        .WithMany()
                        .HasForeignKey("CurrentTeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.TimeFrame", "TimeFrame")
                        .WithOne("TimetableChange")
                        .HasForeignKey("SchoolGradebook.Models.TimetableChange", "TimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentRoom");

                    b.Navigation("CurrentSubjectInstance");

                    b.Navigation("CurrentTeacher");

                    b.Navigation("StudentGroup");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("SchoolGradebook.Models.TimetableRecord", b =>
                {
                    b.HasOne("SchoolGradebook.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolGradebook.Models.SubjectInstance", "SubjectInstance")
                        .WithMany("TimetableRecords")
                        .HasForeignKey("SubjectInstanceId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("SchoolGradebook.Models.TimeFrame", "TimeFrame")
                        .WithOne("TimetableRecord")
                        .HasForeignKey("SchoolGradebook.Models.TimetableRecord", "TimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Room");

                    b.Navigation("SubjectInstance");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Class", b =>
                {
                    b.Navigation("StudentGroupEnrollments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolGradebook.Models.GradeGroup", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolGradebook.Models.LessonRecord", b =>
                {
                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Room", b =>
                {
                    b.Navigation("TimeFrames");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentGroupEnrollments");
                });

            modelBuilder.Entity("SchoolGradebook.Models.StudentGroup", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("StudentGroupEnrollments");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectInstance", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Grades");

                    b.Navigation("TimeFrames");

                    b.Navigation("TimetableRecords");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectMaterialGroup", b =>
                {
                    b.Navigation("SubjectMaterials");
                });

            modelBuilder.Entity("SchoolGradebook.Models.SubjectType", b =>
                {
                    b.Navigation("SubjectInstances");

                    b.Navigation("SubjectMaterials");
                });

            modelBuilder.Entity("SchoolGradebook.Models.Teacher", b =>
                {
                    b.Navigation("Approbations");

                    b.Navigation("SubjectInstances");

                    b.Navigation("SubjectMaterials");
                });

            modelBuilder.Entity("SchoolGradebook.Models.TimeFrame", b =>
                {
                    b.Navigation("LessonRecord");

                    b.Navigation("TimetableChange");

                    b.Navigation("TimetableRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
